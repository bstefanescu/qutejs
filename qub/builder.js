const fspath = require('path');

/*
* Lazy config factory reference.
* The config factory is not loaded at workspace load since it may 'require' packages that are generated by the build
* so we load it only when when requested (at this time due to build dependenciers the required pacdkage should be already built)
*/
function ConfigFactoryRef(ws, path) {
	var config;
	return function() {
		if (config === undefined) {
			config = require(fspath.join(ws.root, path));
		}
		return config;
	}
}

function Builder(ws) {
	this._build = ws.config.builder
		? require(ws.file(ws.config.builder)) : require('./impl/rollup-builder.js');
	this.configs = null;
	this.defaultType = null;

	// load config
	var types = ws.config.configs;
	if (types) {
		var typeRegistry = {};
		const typeNames = Object.keys(types);
		var defaultType = typeNames[0];
		for (var i=0,l=typeNames.length; i<l; i++) {
			var name = typeNames[i];
			var val = types[name];
			if (name === '*') {
				defaultType = name;
			} else {
				typeRegistry[name] = ConfigFactoryRef(ws, types[name]);
			}
		}
		this.configs = typeRegistry;
		this.defaultConfig = defaultType;
	}
}

function extractConfigName(args) {
	const i = args.indexOf('-c');
	if (i > -1) {
		const name = args[i+1];
		args.splice(i, 2);
		return name;
	}
	return null;
}

Builder.prototype = {
	build(ws, project, args) {
		let pkgBuild = project.pkg.build;
		let configName = extractConfigName(args);
		if (!configName) {
			configName = (pkgBuild && pkgBuild.config) || this.defaultConfig;
			console.log('Building project',project.name);
		} else {
			console.log('Building project',project.name,'using',configName);
		}

		if (!configName) throw new Error('No default build config was defined!');

		let configFactoryRef = this.configs[configName];
		if (!configFactoryRef) throw new Error('Unknown build config: '+configName);

		// the build depdends on link
		project.link(); // be sure project deps are visible

		let config = configFactoryRef()(project, args);

		if (Array.isArray(config)) {
			return Promise.all(config.map(config => {
				// allow users to use undefined configs and outputs (the user may want to conditionally build some confiog / outputs)
				if (config) {
					if (config.output && Array.isArray(config.output)) {
						config.output = config.output.filter(out => !!out); // remove undefined outputs
					} else if (config.output) {
						config.output = [ config.output ];
					} else {
						config.output = [];
					}
					return this._build(project, config, args);
				} // else avoid building undefined configs
			}));
		} else {
			if (!Array.isArray(config.output)) config.output = [config.output];
			return this._build(project, config, args);
		}
	}
}

module.exports = Builder;
