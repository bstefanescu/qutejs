
- refactor doc sidebar:
	- Plugins, Components must be at bottom (above Examples)
- cleanup dev release:
	- add bubble
- dist releases - use always qute- and not qutejs-
- create separate components git repository
- polyfill - add doc section + add promise??

- form and other plugins are registering things at load time. We must avoid registering twice if the form is imported twice.

- declarative listeners are not removed when the parent component are disconnecting
 should we automatically remove them at disconnect to free up resources?

- check unused methods in Qute and remove them. (Qute.link?)
- Find a way to avoid registering optional fucntionality from plugins (for example in form/index.js).
These are only needed when relying on the qute as an external dependency. But, when you use rollup to build it may unused code to the final bundle.
(Qute.$ should be filled only in modular builds? And then use an internal import directive?
e.g. Qute.import('form') -> will onlyt be available in qute-dev and will return Qute.$
in prod we use normal `import` statement.
For the inlined scripts we may transform import x from 'module' to var x = Qute.import('module')
)

- documentation for list helper
- which / when to use polyfills docs

- work more on prop_types.js
- remove `group` plugin
- remove :attr syntax?
- use alternative notation: q:for, q:class, q:emit-click, q:emit-remove-onclick, q:onclick, q:bind-href, q:class  etc. for attribute directives

1. move more functions to @qutejs/test-utils
2. Be able to declare private templates in JSQ files?
3. use setAsap instead of setTimeout in update queue?
4. optimize update queue -> split runs of update in several async chunks? (one chunk per component?)
6. redux/flux integration as an example?
7. use a dirty prop on VM so that when disconnected and reconnected to automatically update if dirty?

Tests:
- x-toggle
- x-bind: and x-on: and :attr
- event listener & emit & x-listeners
- watch
- properties binding
- expressions
- styles
- lifecycle
- context
- message bus
- Qute facade - creating new components
- router


Docs:
- example with nesting through tag and slot


TEST: view / if / for - update propagated inside the own rendering?
