import window, {document} from '@qutejs/window';
import Qute from '@qutejs/runtime';
import Modal from './modal.js';
import './modal.css';

var modal_id = 0;

/**
 */
const QuteModal = Qute("modal", {
	init: function() {
		return {
			animation: null,
			closeOnEsc: true,
			closeOnClick: true,
			disableScroll: true
		 };
	},
	render: function() {
		return document.createComment('[modal]');
	},
	created: function() {
		var slots = this.$slots;
		if (!slots || !slots.default) throw new Error('<modal> requires a content!');

		var self = this;
		this.modal = new Modal('qute-modal-'+(modal_id++), slots.default, {
			effect: this.animation,
			closeOnEsc:this.closeOnEsc,
			closeOnClick: this.closeOnClick,
			disableScroll: this.disableScroll,
			open: function(modal) {
				self.emit("open", self.modal.el);
			},
			close: function(modal) {
				self.emit("close", self.modal.el);
			},
			ready: function(modal) {
				self.emit("ready", self.modal.el);
			},
			action: function(action, target) {
				self.emit("action", {modal: self.modal.el, name: action, target: target});
			}
		});
	},
	connected: function() {
		document.body.appendChild(this.modal.el);
	},
	disconnected: function() {
		document.body.removeChild(this.modal.el);
	},
	open: function(now) {
		if (now) {
			this.modal.open();
		} else {
			var modal = this.modal;
			window.setTimeout(function() {
				modal.open();
			}, 0);
		}
	},
	close: function() {
		this.modal.close();
	},
	get isOpen() {
		return this.isOpen();
	}
}).channel(function(msg) {
	if (msg === 'open') {
		this.open();
	} else if (msg === 'close') {
		this.close();
	}
}).watch('animation', function(value) {
	this.modal.effect(value);
	return false;
}).watch('closeOnEsc', function(value) {
	this.modal.settings.closeOnEsc = !!value;
	return false;
}).watch('closeOnClick', function(value) {
	this.modal.settings.closeOnClick = !!value;
	return false;
}).watch('disableScroll', function(value) {
	this.modal.settings.disableScroll = !!value;
	return false;
});

Qute.Modal = Modal;

export default QuteModal;
