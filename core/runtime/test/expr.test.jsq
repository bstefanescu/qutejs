
import assert from 'assert';
import {snapshot} from '@qutejs/test-utils';
import window, {document} from '@qutejs/window';
import Qute from '@qutejs/runtime';
import { createMountPoint } from './utils.js';

const { Template, ViewModel, Property } = Qute;

<q:template name='EntitiesTemplate'>
	<div>{{htmlCode}}</div>
</q:template>

var Entities = Qute(EntitiesTemplate, {
	init: function() {
		this.htmlCode = '<a href="#">John & Doe</a>';
	}
});

<q:template name='SymbolsTemplate'>
	<div>
	<div>Hello {{this.firstName}} {{this.lastName}}!</div>
	<div>{{JSON.stringify(this)}}</div>
	</div>
</q:template>


@Template(SymbolsTemplate)
class Symbols extends ViewModel {
    firstName = 'John';
    @Property lastName ='Doe';
}


<q:template name='RootTemplate'>
	<div>
	<div>Hello {{firstName}} {{lastName}}!</div>
	<div>Hello {{this.firstName}} {{this.lastName}}!</div>
	<div>Hello {{firstName + ' ' + lastName}}!</div>
	<div>Hello {{fullName}}!</div>
	<div>Hello {{getFullName()}}!</div>
	</div>
</q:template>


@Template(RootTemplate)
class Root extends ViewModel {
    firstName = 'John';
    @Property lastName = 'Doe';

	get fullName() {
		return this.firstName + ' ' + this.lastName;
	}

	getFullName() {
		return this.firstName + ' ' + this.lastName;
	}
}


describe('Mustache expressions', function() {
	var root = createMountPoint('root');
	new Root().mount(root);
	it('should resolve functions, properties and getters', function() {
		snapshot('expr-resolve', root.innerHTML, true);
	});

	var symbols = createMountPoint('symbols');
	new Symbols().mount(symbols);
	it('should preserve built-in symbols ', function() {
		snapshot('expr-symbols', symbols.innerHTML, true);
	});

	var entities = createMountPoint('symbols');
	new Entities().mount(entities);
	it('should escape HTML entities ', function() {
		snapshot('expr-entities', entities.innerHTML, true);
	});

});
