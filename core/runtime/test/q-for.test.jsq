import assert from 'assert';
import {snapshot} from '@qutejs/test-utils';
import window, {document} from '@qutejs/window';
import Qute from '..';
import { mountTest, runAfter } from './utils.js';


<q:template name='DomTestRootTemplate'>
	<div>
		<span q:for='item in list' q:key='.'>{{item}} </span>
	</div>
</q:template>


<q:template name='FnCompVmTemplate'><span><slot/></span> </q:template>
<q:template name='FnComp'><fn-comp-vm><template name='default'><slot/></template></fn-comp-vm></q:template>

<q:template name='FuncTestRootTemplate'>
	<div>
		<fn-comp q:for='item in list' q:key='.'>{{item}} </fn-comp>
	</div>
</q:template>

<q:template name='VmCompTemplate'><span><slot/></span> </q:template>

<q:template name='VmTestRootTemplate'>
	<div>
		<vm-comp q:for='item in list' q:key='.'>{{item}} </vm-comp>
	</div>
</q:template>


<q:template name='VmComp2Template'><span>{{id}}:{{text}} </span> </q:template>

<q:template name='VmTestRoot2Template'>
	<div>
		<vm-comp2 q:for='item in list'  q:key='id' text={item.text} id={item.id} />
	</div>
</q:template>

var DomTestRoot = Qute(DomTestRootTemplate, {
	init() {
		this.list = ['item1', 'item2', 'item3'];
	}
});

var FuncTestRoot = Qute(FuncTestRootTemplate, {
	init() {
		this.list = ['item1', 'item2', 'item3'];
	}
});

var VmTestRoot = Qute(VmTestRootTemplate, {
	init() {
		this.list = ['item1', 'item2', 'item3'];
	}
});

var vmFnCompCnt = 0;
var vmCompCnt = 0;
var vmComp2Cnt = 0;
const FnCompVm = Qute(FnCompVmTemplate, {
	connected: function() {
		vmFnCompCnt++;
	},
	disconnected: function() {
		vmFnCompCnt--;
	}
});

const VmComp = Qute(VmCompTemplate, {
	connected: function() {
		vmCompCnt++;
	},
	disconnected: function() {
		vmCompCnt--;
	}
});

var VmTestRoot2 = Qute(VmTestRoot2Template, {
	init() {
		this.list = [{id:1, text:'item1'}, {id:2, text:'item2'}, {id:3, text:'item3'}];
	}
});

const VmComp2 = Qute(VmComp2Template, {
	connected: function() {
		vmComp2Cnt++;
	},
	disconnected: function() {
		vmComp2Cnt--;
	}
}).properties({
    id: null, text: null
});

function removeItem(list, value) {
	var i = list.indexOf(value);
	if (i > -1) {
		return list.splice(i, 1);
	}
	return null;
}
function moveItem(list, from, to) {
	var fromVal = list[from];
	var toVal = list[to];

	list[from] = toVal;
	list[to] = fromVal;
}

describe('q:for attribute', function() {

	context('q:for works on DOM elements', function() {
		var test = mountTest(DomTestRoot);
		it('renders the element as many times as the list size', function() {
			assert.equal(test.textContent.trim(), "item1 item2 item3");
		});

		var vm = test.firstChild.__qute__;
		it('updates on insertion', function(done) {
			vm.list.push('item4');
			vm.update();
			runAfter(function() {
				assert.equal(test.textContent.trim(), "item1 item2 item3 item4");
				done();
			});
		});

		it('updates on removal', function(done) {
			removeItem(vm.list, 'item2');
			vm.update();
			runAfter(function() {
				assert.equal(test.textContent.trim(), "item1 item3 item4");
				done();
			});
		});

		it('updates on move', function(done) {
			moveItem(vm.list, 0, 1);
			vm.update();
			runAfter(function() {
				assert.equal(test.textContent.trim(), "item3 item1 item4");
				done();
			});
		});

	});

	context('q:for works on func components', function() {
		var test = mountTest(FuncTestRoot);
		it('renders the element as many times as the list size', function() {
			assert.equal(test.textContent.trim(), "item1 item2 item3");
			assert.equal(vmFnCompCnt, 3);
		});

		var vm = test.firstChild.__qute__;
		it('updates on insertion', function(done) {
			vm.list.push('item4');
			vm.update();
			runAfter(function() {
				assert.equal(test.textContent.trim(), "item1 item2 item3 item4");
				assert.equal(vmFnCompCnt, 4);
				done();
			});
		});

		it('updates on removal', function(done) {
			removeItem(vm.list, 'item2');
			vm.update();
			runAfter(function() {
				assert.equal(test.textContent.trim(), "item1 item3 item4");
				assert.equal(vmFnCompCnt, 3);
				done();
			});
		});

		it('updates on move', function(done) {
			moveItem(vm.list, 0, 1);
			vm.update();
			runAfter(function() {
				assert.equal(test.textContent.trim(), "item3 item1 item4");
				assert.equal(vmFnCompCnt, 3);
				done();
			});
		});

	});

	context('q:for works on vm components', function() {
		var test = mountTest(VmTestRoot);
		it('renders the element as many times as the list size', function() {
			assert.equal(test.textContent.trim(), "item1 item2 item3");
			assert.equal(vmCompCnt, 3);
		});

		var vm = test.firstChild.__qute__;
		it('updates on insertion', function(done) {
			vm.list.push('item4');
			vm.update();
			runAfter(function() {
				assert.equal(test.textContent.trim(), "item1 item2 item3 item4");
				assert.equal(vmCompCnt, 4);
				done();
			});
		});

		it('updates on removal', function(done) {
			removeItem(vm.list, 'item2');
			vm.update();
			runAfter(function() {
				assert.equal(test.textContent.trim(), "item1 item3 item4");
				assert.equal(vmCompCnt, 3);
				done();
			});
		});

		it('updates on move', function(done) {
			moveItem(vm.list, 0, 1);
			vm.update();
			runAfter(function() {
				assert.equal(test.textContent.trim(), "item3 item1 item4");
				assert.equal(vmCompCnt, 3);
				done();
			});
		});

	});

	context('q:for items are reactive', function() {
		var test = mountTest(VmTestRoot2);
		it('renders the element as many times as the list size', function() {
			assert.equal(test.textContent.trim(), "1:item1 2:item2 3:item3");
			assert.equal(vmComp2Cnt, 3);
		});

		var vm = test.firstChild.__qute__;
		it('updates on insertion', function(done) {
			vm.list.push({id: 4, text: 'item4'});
			vm.update();
			runAfter(function() {
				assert.equal(test.textContent.trim(), "1:item1 2:item2 3:item3 4:item4");
				assert.equal(vmComp2Cnt, 4);
				done();
			});
		});

		it('updates on removal', function(done) {
			var i = vm.list.findIndex(function(item) {
				return item.id === 2;
			});
			vm.list.splice(i, 1);
			vm.update();
			runAfter(function() {
				assert.equal(test.textContent.trim(), "1:item1 3:item3 4:item4");
				assert.equal(vmComp2Cnt, 3);
				done();
			});
		});

		it('updates on move', function(done) {
			moveItem(vm.list, 0, 1);
			vm.update();
			runAfter(function() {
				assert.equal(test.textContent.trim(), "3:item3 1:item1 4:item4");
				assert.equal(vmComp2Cnt, 3);
				done();
			});
		});

	});

});



describe.skip('TODO - rewriting reactive lists!', ()=>{});

