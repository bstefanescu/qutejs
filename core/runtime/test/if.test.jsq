/*
tests:
1. when if is true only if branch is rendered
2. when if is false only the else branch is rendered
3. onchange callback is called when the if state changes. (but not the first time it is rendcered)
4. nested VMs should be disconnected when the branch containing them are nbot rendered
(we test this using the msg property) p
-> After a branch was removed setting the msg property must not be propagated to the nested component
*/

import assert from 'assert';
import {snapshot} from '@qutejs/test-utils';
import window, {document} from '@qutejs/window';
import Qute from '..';
import { createMountPoint, runAfter } from './utils.js';


<q:template name='IfElseTestTemplate'>
<div>
	<if value='user'>
		<nested-vm user={user} msg={msg} />
	</if>
	<if value='user' onchange='userChanged'>
		<div id='if-else-true'>Hello {{user}}</div>
	<else>
		<div id='if-else-false'>Hello anonymous</div>
	</if>
</div>
</q:template>

<q:template name='NestedVmTemplate'>
	<div id='if-true'>Hello {{user}}</div>
</q:template>

<q:template name='IfElseIfTestTemplate'>
<div>
	<if value='state===0' onchange='stateChanged'>
		<div id='if-state-0'>State {{state}}</div>
	<else-if value='state===1'/>
		<div id='if-state-1'>State {{state}}</div>
	</if>
</div>
</q:template>

<q:template name='IfElseIfElseTestTemplate'>
<div>
	<if value='state===0' onchange='stateChanged'>
		<div id='ifeie-state-0'>State {{state}}</div>
	<else-if value='state===1'/>
		<div id='ifeie-state-1'>State {{state}}</div>
	<else />
		<div id='ifeie-state-other'>State {{state}}</div>
	</if>
</div>
</q:template>

var NESTED_MSG = null;

var NestedVm = Qute(NestedVmTemplate).properties({
    user: null, msg: null
}).watch('msg', function(val) {
	NESTED_MSG = val;
});

var IfElseTest = Qute(IfElseTestTemplate, {
	init: function() {
		this.changes = 0;
	},
	// change user value using a channel
	channel: function(userValue) {
		this.user = userValue;
	},
	userChanged: function(value) {
		this.changes++;
	}
}).properties({
    user: null, msg: null
});

var IfElseIfTest = Qute(IfElseIfTestTemplate, {
	init: function() {
		this.lastChange = 0;
	},
	stateChanged(val) {
		this.lastChange = val;
	}
}).properties({
    state: 0
});

var IfElseIfElseTest = Qute(IfElseIfElseTestTemplate, {
	init: function() {
		this.lastChange = 0;
	},
	stateChanged(val) {
		this.lastChange = val;
	}
}).properties({
    state: 0
});


describe('If / Else Directive', function() {
	var root = new IfElseTest();
	var container = createMountPoint('root');
	root.mount(container);

	it('should not render the true branch', function(done) {
		// default value for user is null
		assert.equal(root.changes, 0);
		assert.ok(!document.getElementById('if-true'));
		assert.ok(document.getElementById('if-else-false'));
		assert.ok(!document.getElementById('if-else-true'));
		snapshot('if-else-false', container.innerHTML);
		done();

	});

	specify('nested VM should not be connected', function(done) {
		root.msg = 'MSG1';
		runAfter(function() {
			assert.ok(!NESTED_MSG);
			done();
		});
	});


	it('should render the true branch', function(done) {
		// assign a value to user reactive prop
		root.user = 'John';
		// execute after the VM updated the DOM
		runAfter(function() {
			assert.equal(root.changes, 1);
	 		assert.ok(document.getElementById('if-true'));
			assert.ok(!document.getElementById('if-else-false'));
			assert.ok(document.getElementById('if-else-true'));
			snapshot('if-else-true', container.innerHTML);

			done();
			root.msg = 'Bla';

		});
	});

	specify('nested VM should be connected', function(done) {
		root.msg = 'MSG2';
		runAfter(function() {
			assert.equal(NESTED_MSG, 'MSG2');
			done();
		});
	});

	it('should not render the true branch', function(done) {
		root.user = null;

		// execute after the VM updated the DOM
		runAfter(function() {
			assert.equal(root.changes, 2);
	 		assert.ok(!document.getElementById('if-true'));
			assert.ok(document.getElementById('if-else-false'));
			assert.ok(!document.getElementById('if-else-true'));
			done();
		});
	});

	specify('nested VM should not be connected', function(done) {
		root.msg = 'MSG3';
		runAfter(function() {
			assert.equal(NESTED_MSG, 'MSG2');
			done();
		});
	});

});

describe("If / Else-if Directive", function() {
	var root = new IfElseIfTest();
	var container = createMountPoint('root2');
	root.mount(container);

	it('should render default branch', function(done) {
		assert.equal(root.lastChange, 0);
		assert.equal(root.state, 0);
		assert.ok(document.getElementById('if-state-0'));
		assert.ok(!document.getElementById('if-state-1'));
		done();
	});

	it('should render the else-if branch', function(done) {
		root.state = 1;
		runAfter(function() {
			assert.equal(root.lastChange, 1);
			assert.equal(root.state, 1);
			assert.ok(!document.getElementById('if-state-0'));
			assert.ok(document.getElementById('if-state-1'));
			done();
		});
	});

	it('should render no branch', function(done) {
		root.state = 123;
		runAfter(function() {
			assert.equal(root.lastChange, -1);
			assert.equal(root.state, 123);
			assert.ok(!document.getElementById('if-state-0'));
			assert.ok(!document.getElementById('if-state-1'));
			done();
		});
	});

	it('should render the if branch', function(done) {
		root.state = 0;
		runAfter(function() {
			assert.equal(root.lastChange, 0);
			assert.equal(root.state, 0);
			assert.ok(document.getElementById('if-state-0'));
			assert.ok(!document.getElementById('if-state-1'));
			done();
		});
	});

});

describe("If / Else-if / Else Directive", function() {
	var root = new IfElseIfElseTest();
	var container = createMountPoint('root3');
	root.mount(container);

	it('should render default branch', function(done) {
		assert.equal(root.lastChange, 0);
		assert.equal(root.state, 0);
		assert.ok(document.getElementById('ifeie-state-0'));
		assert.ok(!document.getElementById('ifeie-state-1'));
		assert.ok(!document.getElementById('ifeie-state-other'));
		done();
	});

	it('should render the else-if branch', function(done) {
		root.state = 1;
		runAfter(function() {
			assert.equal(root.lastChange, 1);
			assert.equal(root.state, 1);
			assert.ok(!document.getElementById('ifeie-state-0'));
			assert.ok(document.getElementById('ifeie-state-1'));
			assert.ok(!document.getElementById('ifeie-state-other'));
			done();
		});
	});

	it('should render the else branch', function(done) {
		root.state = 123;
		runAfter(function() {
			assert.equal(root.lastChange, 2);
			assert.equal(root.state, 123);
			assert.ok(!document.getElementById('ifeie-state-0'));
			assert.ok(!document.getElementById('ifeie-state-1'));
			assert.ok(document.getElementById('ifeie-state-other'));
			done();
		});
	});

	it('should render the if branch', function(done) {
		root.state = 0;
		runAfter(function() {
			assert.equal(root.lastChange, 0);
			assert.equal(root.state, 0);
			assert.ok(document.getElementById('ifeie-state-0'));
			assert.ok(!document.getElementById('ifeie-state-1'));
			assert.ok(!document.getElementById('ifeie-state-other'));
			done();
		});
	});

});
