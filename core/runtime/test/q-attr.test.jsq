import assert from 'assert';
import {snapshot} from '@qutejs/test-utils';
import window, {document} from '@qutejs/window';
import Qute from '..';
import { mountTest, click, runAfter } from './utils.js';


<q:template name='ColorSpans1Template'>
	<div q:color-spans>Hello <span>world</span>!</div>
</q:template>

<q:template name='ColorSpans2Template'>
	<div q:color-spans='{color:"red"}'>Hello <span>world</span>!</div>
</q:template>

function colorSpansDir(xattrs, valueFn) {
	return function(el) {
		var value = this.eval(valueFn);
		var color = (value && value.color) || 'green';
		var spans = el.getElementsByTagName('span');
		for (var i=0,l=spans.length; i<l; i++) spans[i].style.color = color;
	}
}
Qute.registerDirective('color-spans', colorSpansDir);

var TestColorSpans1 = Qute(ColorSpans1Template);
var TestColorSpans2 = Qute(ColorSpans2Template);

// -------

<q:template name='TestLambda1Template'>
    <div>
    <input type='text' name='name' value='Hello World!' q:call='el => this.inputEl = el'><button @click='onClick'>Click me!</button>
    </div>
</q:template>

var TestLambda1 = Qute(TestLambda1Template, {
	init() {
		this.clicked = 0;
	},
    onClick() {
    	assert.equal(this.inputEl.value, 'Hello World!');
    	this.clicked++;
    }
});

// -------


<q:template name='MyFn'>
	<div>Hello <span>world</span>!</div>
</q:template>

<q:template name='TestFnTemplate'>
	<my-fn q:call='testOnCreate' q:color-spans='{color:"cyan"}' />
</q:template>

var TestFn = Qute(TestFnTemplate, {
	testOnCreate(el) {
        assert.equal(this.render.name, 'TestFnTemplate');
		assert.equal(el.tagName, 'DIV');
		assert.equal(el.textContent, 'Hello world!');
	}
});

<q:template name='MyVm'>
	<div>Hello <span>world</span>!</div>
</q:template>

<q:template name='TestVmTemplate'>
	<my-vm q:call='testOnCreate' q:color-spans='{color:"blue"}' />
</q:template>

var TestVm = Qute(TestVmTemplate, {
	testOnCreate(el) {
		assert.equal(this.render.name, 'TestVmTemplate');
		assert.equal(el.tagName, 'DIV');
		assert.equal(el.textContent, 'Hello world!');
	}
});


describe('Custom Attributes', function() {

	it('calls registered directives (no config)', function() {
		var test1 = mountTest(TestColorSpans1);
		assert.equal(test1.getElementsByTagName('span')[0].style.color, 'green');
	});
	it('calls registered directives (with config)', function() {
		var test2 = mountTest(TestColorSpans2);
		assert.equal(test2.getElementsByTagName('span')[0].style.color, 'red');
	});
	it('calls lambda callbacks using q:call', function() {
		var test3 = mountTest(TestLambda1);
		assert.equal(test3.$vm.clicked, 0);
		click(test3.querySelector('button'));
		assert.equal(test3.$vm.clicked, 1);
	});
	it('works on functional components', function() {
		var test5 = mountTest(TestFn);
		assert.equal(test5.getElementsByTagName('span')[0].style.color, 'cyan');
	});
	it('works on VM components', function() {
		var test6 = mountTest(TestVm);
		assert.equal(test6.getElementsByTagName('span')[0].style.color, 'blue');
	});
});
