import assert from 'assert';
import {snapshot} from '@qutejs/test-utils';
import Qute from '..';
import { mountTest, runAfter } from './utils.js';

const { Template, ViewModel, Property } = Qute;

<q:template name='TestFnAttrs'>
	<div>
		<span q:attrs><slot/></span>
		<span q:attrs='class, msg'>Include test</span>
		<span q:attrs='!class msg'>Exclude test</span>
	</div>
</q:template>

<q:template name='TestFnRootTemplate'>
	<test-fn-attrs class={theClass} title='Some tooltip' msg='hello'>Hello!</test-fn-attrs>
</q:template>

<q:template name='FuncComp'>
    <div q:attrs='class'>
        A <a q:attrs='!class'>template</a> component
    </div>
</q:template>

<q:template name='FuncCompWrapper'><func-comp q:attrs /></q:template>
<q:template name='TestFuncCompTemplate'><func-comp-wrapper class={theClass} title='Some tooltip' href='#action' /></q:template>

<q:template name='VmCompTemplate'>
    <div q:attrs='class'>
        A <a q:attrs='!class'>VM</a> component: {{someProp}}
    </div>
</q:template>

<q:template name='VmCompWrapper'>
    <vm-comp q:attrs />
</q:template>
<q:template name='TestVmCompTemplate'>
    <vm-comp-wrapper class={theClass} title='Some tooltip' href='#action' some-prop='the injected prop' />
</q:template>


<q:template name='CompClassAndArgs'>
    <vm-comp q:attrs />
</q:template>
<q:template name='TestClassAndArgs'>
    <CompClassAndArgs class='base-class' q:class={{"other-class":true}} />
</q:template>


@Template(TestFnRootTemplate)
class TestFnRoot extends ViewModel {
    @Property theClass = 'the_class';
}

@Template(TestFuncCompTemplate)
class TestFuncComp extends ViewModel {
    @Property theClass = 'the_class';
}

@Template(TestVmCompTemplate)
class TestVMComp extends ViewModel {
    @Property theClass = 'the_class';
}

@Template(VmCompTemplate)
class VmComp extends ViewModel {
    @Property someProp = 'the_value';
}

describe('q:attrs attribute', function() {

	context('q:attrs works in DOM elements', function() {
		var test = mountTest(TestFnRoot);
		it('template component is injecting q:attrs to nested elements', function() {
			assert.equal(test.querySelectorAll('.the_class').length, 2);
			assert.equal(test.querySelectorAll('.the_changed_class').length, 0);
			snapshot('q-attrs-dom', test.innerHTML);
		});

		it('injected attributes are reactive', function(done) {
			test.firstChild.__qute__.theClass = 'the_changed_class';
			runAfter(function() {
                try {
                    assert.equal(test.querySelectorAll('.the_class').length, 0);
                    assert.equal(test.querySelectorAll('.the_changed_class').length, 2);
                } finally {
				    done();
                }
			});
		});

	});

	context('q:attrs works on template components', function() {
		var test = mountTest(TestFuncComp);

		it('template component is injecting q:attrs to nested elements', function() {
			assert.equal(test.querySelectorAll('.the_class').length, 1);
			assert.equal(test.querySelectorAll('.the_changed_class').length, 0);
			snapshot('q-attrs-func', test.innerHTML);
		});

		it('injected attributes are reactive', function(done) {
			test.firstChild.__qute__.theClass = 'the_changed_class';
			runAfter(function() {
				assert.equal(test.querySelectorAll('.the_class').length, 0);
				assert.equal(test.querySelectorAll('.the_changed_class').length, 1);
				done();
			});
		});

	});

	context('q:attrs works on VM components', function() {

		var test = mountTest(TestVMComp);

		it('VM component is injecting q:attrs to nested elements', function() {
			assert.equal(test.querySelectorAll('.the_class').length, 1);
			assert.equal(test.querySelectorAll('.the_changed_class').length, 0);
			snapshot('q-attrs-vm', test.innerHTML);
		});

		it('injected attributes are reactive', function(done) {
			test.firstChild.__qute__.theClass = 'the_changed_class';
			runAfter(function() {
				assert.equal(test.querySelectorAll('.the_class').length, 0);
				assert.equal(test.querySelectorAll('.the_changed_class').length, 1);
				done();
			});
		});

	});

	context('q:attrs works along with q:class', function() {

        var Test = Qute(TestClassAndArgs);
		var test = mountTest(Test);

		it('works injecting class through q:args and adding new classes through q:class', function() {
			assert.equal(test.querySelectorAll('.base-class.other-class').length, 1);
		});

	});

});
