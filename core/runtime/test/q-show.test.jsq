import assert from 'assert';
import {snapshot} from '@qutejs/test-utils';
import Qute from '..';
import { mountTest, runAfter } from './utils.js';

const { Template, ViewModel, Property } = Qute;

<q:template name='TestShowTemplate'>
	<div q:show='isVisible'>Is Visible</div>
</q:template>

<q:template name='TestShow2Template'>
	<div q:show='isVisible' style='display:inline-block'>Is Visible</div>
</q:template>

@Template(TestShowTemplate)
class TestShow extends ViewModel {
    @Property isVisible = false;
}

@Template(TestShow2Template)
class TestShow2 extends ViewModel {
    @Property isVisible = true
}

<q:template name='TestShowVmTemplate'>
    <div><slot/></div>
</q:template>

<q:template name='TestShowVmRootTemplate'>
    <test-show q:show="showIt">Hello!</test-show>
</q:template>


@Template(TestShowVmRootTemplate)
class TestShowVmRoot extends ViewModel {
    @Property showIt = false;
}

const TestShowVm = Qute(TestShowVmTemplate);


describe('q:show attribute', function() {
	var test = mountTest(TestShow);

	it('should not be visible', function(done) {
		assert.equal(test.firstChild.style.display, 'none');
		done();
	});

	it('should become visible', function(done) {
		test.firstChild.__qute__.isVisible = true;
		runAfter(function() {
			assert.ok(!test.firstChild.style.display || test.firstChild.style.display!=='none');
			done();
		});
	});

	it('should toggle visibility to none', function(done) {
		test.firstChild.__qute__.isVisible = false;
		runAfter(function() {
			assert.equal(test.firstChild.style.display, 'none');
			done();
		});
	});

	var test2 = mountTest(TestShow2);
	context('should restore original display', function(done) {

		it('should be visible', function(done) {
			assert.equal(test2.firstChild.style.display, 'inline-block');
			done();
		});

		it('should not be visible', function(done) {
			test2.firstChild.__qute__.isVisible = false;
			runAfter(function() {
				assert.equal(test2.firstChild.style.display, 'none');
				done();
			});
		});

		it('should restore display', function(done) {
			test2.firstChild.__qute__.isVisible = true;
			runAfter(function() {
				assert.equal(test2.firstChild.style.display, 'inline-block');
				done();
			});
		});

	});

	context('works on VM components', function(done) {
		var testVM = mountTest(TestShowVmRoot);

		it('should not be visible', function(done) {
			assert.equal(testVM.firstChild.style.display, 'none');
			done();
		});

		it('should restore display', function(done) {
			testVM.firstChild.__qute__.showIt = true;
			runAfter(function() {
				assert.equal(testVM.firstChild.style.display, '');
				done();
			});
		});

	});
});
