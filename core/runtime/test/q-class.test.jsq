import assert from 'assert';
import {snapshot} from '@qutejs/test-utils';
import window, {document} from '@qutejs/window';
import Qute from '..';
import { mountTest, runAfter } from './utils.js';

<q:template name='test-class-0'>
	<span class = { (isActive ? "active " : "")+"link" }></span>
</q:template>

<q:template name='test-class-1'>
	<span q:class='["active", "link", null]'></span>
</q:template>

<q:template name='test-class-2'>
	<span q:class='{"active": isActive, "link": true}'></span>
</q:template>

<q:template name='test-class-3'>
	<span q:class='theClass'></span>
</q:template>

<q:template name='test-class-5'>
	<span class='link' q:class='{active: isActive}'></span>
</q:template>

<q:template name='test-class-6'>
	<span q:class='[ isActive && "active", "link" ]'></span>
</q:template>

var Test0 = Qute('test-class-0', {
	init() {
		return {
			isActive: true
		}
	}
});

var Test1 = Qute('test-class-1');


var Test2 = Qute('test-class-2', {
	init() {
		return {
			isActive: true
		}
	}
});

var Test3 = Qute('test-class-3', {
	init() {
		return {
			theClass: { active: true, link: true }
		}
	}
});

// we need to use computed properties to compute dynamic class bindings
// Note that the array notation [this.isActive && 'active', 'link'] is not reactive (it will work only for the first rendering)
var Test4 = Qute('test-class-3', {
	get theClass() {
		return [ {active: this.isActive}, "link" ];
	},
	init() {
		return {
			isActive: true
		}
	}
});

var Test5 = Qute('test-class-5', {
	init() {
		return {
			isActive: true
		}
	}
});

var Test6 = Qute('test-class-6', {
	init() {
		return {
			isActive: true
		}
	}
});

// q:class on components

<q:template name='test-q-class-vm'>
    <div><slot/></div>
</q:template>

<q:template name='test-q-class-on-vm-root'>
    <test-q-class-vm q:class='{active: selected}'>Hello!</test-q-class-vm>
</q:template>


Qute('test-q-class-on-vm-root');
var TestXClassOnVM = Qute('test-q-class-on-vm-root', {
    init() {
    	return {
    		selected: true
    	}
    }
});



describe('q:class attribute', function() {

	it('dynamic class set using class attribute', function(done) {
		var test = mountTest(Test0);
		var cl = test.firstChild.classList;
		assert.ok(cl.contains('active'));
		assert.ok(cl.contains('link'));

		test.firstChild.__qute__.isActive = false;
		test.firstChild.__qute__.update();
		runAfter(function() {
			assert.ok(!cl.contains('active'));
			assert.ok(cl.contains('link'));
			done();
		});
	});

	it('class set from inline array', function() {
		var test = mountTest(Test1);
		var cl = test.firstChild.classList;
		assert.ok(cl.contains('active'));
		assert.ok(cl.contains('link'));
	});

	it	('class set from inline object and is reactive', function(done) {
		var test = mountTest(Test2);
		var cl = test.firstChild.classList;
		assert.ok(cl.contains('active'));
		assert.ok(cl.contains('link'));

		test.firstChild.__qute__.isActive = false;
		runAfter(function() {
			assert.ok(!cl.contains('active'));
			assert.ok(cl.contains('link'));
			done();
		});

	});

	it('class set from property object and is reactive', function(done) {
		var test = mountTest(Test3);
		var cl = test.firstChild.classList;
		assert.ok(cl.contains('active'));
		assert.ok(cl.contains('link'));

		test.firstChild.__qute__.theClass.active = false;
		test.firstChild.__qute__.update();
		runAfter(function() {
			assert.ok(!cl.contains('active'));
			assert.ok(cl.contains('link'));
			done();
		});
	});

	it('class set from array / object mix and is reactive', function(done) {
		var test = mountTest(Test4);
		var cl = test.firstChild.classList;
		assert.ok(cl.contains('active'));
		assert.ok(cl.contains('link'));

		test.firstChild.__qute__.isActive = false;
		runAfter(function() {
			assert.ok(!cl.contains('active'));
			assert.ok(cl.contains('link'));
			done();
		});
	});


	it('using both class and q:class', function(done) {
		var test = mountTest(Test5);
		var cl = test.firstChild.classList;
		assert.ok(cl.contains('active'));
		assert.ok(cl.contains('link'));

		test.firstChild.__qute__.isActive = false;
		runAfter(function() {
			assert.ok(!cl.contains('active'));
			assert.ok(cl.contains('link'));
			done();
		});
	});

	it('using dynamic array items is not reactive', function(done) {
		var test = mountTest(Test6);
		var cl = test.firstChild.classList;
		assert.ok(cl.contains('active'));
		assert.ok(cl.contains('link'));

		test.firstChild.__qute__.isActive = false;
		runAfter(function() {
			assert.ok(cl.contains('active'));
			assert.ok(cl.contains('link'));
			done();
		});
	});

	it('works on vm components', function(done) {
		var test = mountTest(TestXClassOnVM);
		var cl = test.firstChild.classList;
		assert.ok(cl.contains('active'));

		test.firstChild.__qute__.selected = false;
		runAfter(function() {
			assert.ok(!cl.contains('active'));
			done();
		});
	});


});
