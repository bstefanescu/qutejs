import assert from 'assert';
import {snapshot} from '@qutejs/test-utils';
import window, {document} from '@qutejs/window';
import Qute from '@qutejs/runtime';
import { mountTest, runAfter } from './utils.js';

const { Template, ViewModel, Property } = Qute;

<q:template name='TestClass0'>
	<span class = { (isActive ? "active " : "")+"link" }></span>
</q:template>

<q:template name='TestClass1'>
	<span q:class='["active", "link", null]'></span>
</q:template>

<q:template name='TestClass2'>
	<span q:class='{"active": isActive, "link": true}'></span>
</q:template>

<q:template name='TestClass3'>
	<span q:class='theClass'></span>
</q:template>

<q:template name='TestClass5'>
	<span class='link' q:class='{active: isActive}'></span>
</q:template>

<q:template name='TestClass6'>
	<span q:class='[ isActive && "active", "link" ]'></span>
</q:template>

@Template(TestClass0)
class Test0 extends ViewModel {
    @Property isActive = true;
}

const Test1 = Qute(TestClass1);

@Template(TestClass2)
class Test2 extends ViewModel {
    @Property isActive = true;
}

@Template(TestClass3)
class Test3 extends ViewModel {
    @Property theClass = { active: true, link: true };
}

// we need to use computed properties to compute dynamic class bindings
// Note that the array notation [this.isActive && 'active', 'link'] is not reactive (it will work only for the first rendering)
@Template(TestClass3)
class Test4 extends ViewModel {
    @Property isActive = true;
	get theClass() {
		return [ {active: this.isActive}, "link" ];
	}
}

@Template(TestClass5)
class Test5 extends ViewModel {
    @Property isActive = true;
}

@Template(TestClass6)
class Test6 extends ViewModel {
    @Property isActive = true;
}


// q:class on components

<q:template name='TestQClassVm'>
    <div><slot/></div>
</q:template>

<q:template name='TestQClassOnVmRoot'>
    <test-q-class-vm q:class='{active: selected}'>Hello!</test-q-class-vm>
</q:template>


@Template(TestQClassOnVmRoot)
class TestQClassOnVM extends ViewModel {
    @Property selected = true;
}



describe('q:class attribute', function() {

	it('dynamic class set using class attribute', function(done) {
		var test = mountTest(Test0);
		var cl = test.firstChild.classList;
		assert.ok(cl.contains('active'));
		assert.ok(cl.contains('link'));

		test.firstChild.__qute__.isActive = false;
		test.firstChild.__qute__.update();
		runAfter(function() {
			assert.ok(!cl.contains('active'));
			assert.ok(cl.contains('link'));
			done();
		});
	});

	it('class set from inline array', function() {
		var test = mountTest(Test1);
		var cl = test.firstChild.classList;
		assert.ok(cl.contains('active'));
		assert.ok(cl.contains('link'));
	});

	it	('class set from inline object and is reactive', function(done) {
		var test = mountTest(Test2);
		var cl = test.firstChild.classList;
		assert.ok(cl.contains('active'));
		assert.ok(cl.contains('link'));

		test.firstChild.__qute__.isActive = false;
		runAfter(function() {
			assert.ok(!cl.contains('active'));
			assert.ok(cl.contains('link'));
			done();
		});

	});

	it('class set from property object and is reactive', function(done) {
		var test = mountTest(Test3);
		var cl = test.firstChild.classList;
		assert.ok(cl.contains('active'));
		assert.ok(cl.contains('link'));

		test.firstChild.__qute__.theClass.active = false;
		test.firstChild.__qute__.update();
		runAfter(function() {
			assert.ok(!cl.contains('active'));
			assert.ok(cl.contains('link'));
			done();
		});
	});

	it('class set from array / object mix and is reactive', function(done) {
		var test = mountTest(Test4);
		var cl = test.firstChild.classList;
		assert.ok(cl.contains('active'));
		assert.ok(cl.contains('link'));

		test.firstChild.__qute__.isActive = false;
		runAfter(function() {
			assert.ok(!cl.contains('active'));
			assert.ok(cl.contains('link'));
			done();
		});
	});


	it('using both class and q:class', function(done) {
		var test = mountTest(Test5);
		var cl = test.firstChild.classList;
		assert.ok(cl.contains('active'));
		assert.ok(cl.contains('link'));
		test.firstChild.__qute__.isActive = false;
		runAfter(function() {
			assert.ok(!cl.contains('active'));
			assert.ok(cl.contains('link'));
			done();
		});
	});

	it('using dynamic array items is reactive', function(done) {
		var test = mountTest(Test6);
		var cl = test.firstChild.classList;
		assert.ok(cl.contains('active'));
		assert.ok(cl.contains('link'));

		test.firstChild.__qute__.isActive = false;
		runAfter(function() {
			assert.ok(!cl.contains('active'));
			assert.ok(cl.contains('link'));
			done();
		});
	});

	it('works on vm components', function(done) {
		var test = mountTest(TestQClassOnVM);
		var cl = test.firstChild.classList;
		assert.ok(cl.contains('active'));

		test.firstChild.__qute__.selected = false;
		runAfter(function() {
			assert.ok(!cl.contains('active'));
			done();
		});
	});


});
