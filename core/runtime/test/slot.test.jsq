import assert from 'assert';
import {snapshot} from '@qutejs/test-utils';
import window, {document} from '@qutejs/window';
import Qute from '@qutejs/runtime';
import { mountTest } from './utils.js';

const { Template, ViewModel, Property } = Qute;


<q:template name='SingleWrapper'>
	<blockquote><slot/></blockquote>
</q:template>

<q:template name='SingleWrapperWithDefault'>
	<blockquote><slot>Default content</slot></blockquote>
</q:template>


<q:template name='MultiWrapper'>
	<div>
		<h3><slot name='title'>The default title</slot></h3>
		<div><slot name='content'>The default content</slot></div>
		<div><slot name='optional'>The default optional content</slot></div>
	</div>
</q:template>

<q:template name='MyTitle'>
    <h3><slot/></h3>
</q:template>

<q:template name='MyContent'>
    <div class='content'><slot/></div>
</q:template>

<q:template name='MyPanel'>
    <div class='panel'>
        <my-title>
            <nested><slot name='title'/></nested>
        </my-title>
        <my-content>
            <nested><slot name='content'/></nested>
        </my-content>
    </div>
</q:template>


<q:template name='TestSingleWrapperTemplate'>
	<div>
		<single-wrapper>The <b>wrapped</b> content</single-wrapper>
	</div>
</q:template>
<q:template name='TestSingleWrapperOverrideTemplate'>
	<div>
		<single-wrapper-with-default>The <b>wrapped</b> content</single-wrapper-with-default>
	</div>
</q:template>
<q:template name='TestSingleWrapperDefaultTemplate'>
	<div>
		<single-wrapper-with-default>

		</single-wrapper-with-default>
	</div>
</q:template>
<q:template name='TestMultiWrapperTemplate'>
	<div>
		<multi-wrapper>
			<nested name='title'>The <b>named</b> title</nested>
			<nested name='content'>The <b>named</b> content</nested>
		</multi-wrapper>
	</div>
</q:template>
<q:template name='TestMultiWrapperExtraContentTemplate'>
	<div>
		<multi-wrapper>
			some <b>ingored</b> content
			<nested name='title'>The <b>named</b> title</nested>
			<nested name='content'>The <b>named</b> content</nested>
		</multi-wrapper>
	</div>
</q:template>
<q:template name='TestMultiWrapperOverrideTemplate'>
	<div>
		<multi-wrapper>
			<nested name='title'>The <b>named</b> title</nested>
			<nested name='content'>The <b>named</b> content</nested>
			<nested name='optional'>The <b>named</b> optional content</nested>
		</multi-wrapper>
	</div>
</q:template>

<q:template name='TestNestedContextTemplate'>
	<div>
		<multi-wrapper>
			<nested name='title'>The <b>{{title}}</b> title</nested>
		</multi-wrapper>
	</div>
</q:template>


<q:template name='TestNestedPropagationTemplate'>
	<my-panel>
    	<nested name='title'>{{title}}</nested>
    	<nested name='content'>The panel content</nested>
	</my-panel>
</q:template>


<q:template name='TestVariableContentTemplate'>
	<my-panel>
    	<nested name='title' q:html='title' />
    	<nested name='content'>The panel content</nested>
	</my-panel>
</q:template>

var TestSingleWrapper = Qute(TestSingleWrapperTemplate);
var TestSingleWrapperOverride = Qute(TestSingleWrapperOverrideTemplate);
var TestSingleWrapperDefault = Qute(TestSingleWrapperDefaultTemplate);
var TestMultiWrapper = Qute(TestMultiWrapperTemplate);
var TestMultiWrapperExtraContent = Qute(TestMultiWrapperExtraContentTemplate);
var TestMultiWrapperOverride = Qute(TestMultiWrapperOverrideTemplate);

@Template(TestNestedContextTemplate)
class TestNestedContext extends ViewModel {
	get title() {
		return "The Context Title!";
	}
}
// we tets old ES5 qute componnents too
var TestNestedPropagation = Qute(TestNestedPropagationTemplate, {
	get title() {
		return "The panel title";
	}
});
var TestVariableContent = Qute(TestVariableContentTemplate, {
	get title() {
		return "The panel title";
	}
});

describe('Slot Directive', function() {
	it('should wrap single content', function() {
		var root = mountTest(TestSingleWrapper);
		snapshot('slot-should-wrap-single-content', root.innerHTML, true);
	});
	it('should wrap single content and override defaults', function() {
		var root = mountTest(TestSingleWrapperOverride);
		snapshot('slot-should-wrap-single-content-and-override-defaults', root.innerHTML, true);
	});
	it('should wrap single content and use defaults', function() {
		var root = mountTest(TestSingleWrapperDefault);
		snapshot('slot-should-wrap-single-content-and-use-defaults', root.innerHTML, true);
	});

	it('should wrap multi-content', function() {
		var root = mountTest(TestMultiWrapper);
		snapshot('slot-should-wrap-multi-content', root.innerHTML, true);
	});

	// the same as before
	it('should ignore non "nested" content', function() {
		var root = mountTest(TestMultiWrapperExtraContent);
		snapshot('slot-should-ignoree-non-nested-content', root.innerHTML, true);
	});

	it('should wrap multi-content and override defaults', function() {
		var root = mountTest(TestMultiWrapperOverride);
		snapshot('slot-should-wrap-multi-content-and-override-defaults', root.innerHTML, true);
	});

	it('should use caller context on nested content', function() {
		var root = mountTest(TestNestedContext);
		snapshot('slot-should-use-caller-context-on-nested-content', root.innerHTML, true);
	});

	it('should propagate to wrapped component', function() {
		var root = mountTest(TestNestedPropagation);
		snapshot('slot-should-propagate-to-wrapped-component', root.innerHTML, true);
	});

	it('should inject variable content', function() {
		var root = mountTest(TestVariableContent);
		snapshot('slot-should-inject-variable-content', root.innerHTML, true);
	});

});
