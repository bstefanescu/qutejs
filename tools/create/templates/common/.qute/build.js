import path from 'path';
import qute from '@qutejs/rollup-plugin-qute'
import commonjs from '@rollup/plugin-commonjs'
import nodeResolve from '@rollup/plugin-node-resolve'
import buble from '@rollup/plugin-buble'
import { terser } from 'rollup-plugin-terser'
import devServer from 'rollup-plugin-koa-devserver'

import pkg from '../package.json'

const defaultDevServerPort = 8090;

function plugins(quteConfig) {
	const useBuble = quteConfig && quteConfig.web;
	return [
		qute(quteConfig),
		nodeResolve( {preferBuiltins: true} ),
		commonjs({
			include: ['**/node_modules/**', 'node_modules/**']
		}),
		useBuble && buble({
			objectAssign: 'Object.assign',
			//exclude: ['node_modules/**', '**/*.css'],
			include: ["**/*.js", "**/*.jsq"]
		})
	];
}
/**
 * The default is to generate the web component name from the package name
 * by converting the name to pascal case
 * @param {*} compName
 * @returns
 */
function makeWebComponentName(compName) {
    if (!compName) {
        let name = pkg.name;
        if (name.startsWith('@')) name = name.substring(1);
        compName = name.split(/[_\/-]/).map(part => part[0].toUpperCase()+part.substring(1)).join('');
    }
    return compName;
}

/**
 * The default is to use ${package.name}-${package.version}[.min].js
 * @param {*} baseName
 * @param {*} minimize
 * @returns
 */
function makeWebFileName(baseName, minimize) {
    if (!baseName) {
        let name = pkg.name;
        if (name.startsWith('@')) name = name.substring(1);
        baseName = name.replace(/[_\/]/g, '-')+'-'+pkg.version;
    }
    return baseName+(minimize?'.min.js':'.js');
}

export default class BuildConfig {
    /**
     * Create a build config instance. All options are optionals
     * + src: the source directory. Defaults to `./src`
     * + dist: the dist directory. Defaults to `./dist`
     * + input: the rollup input to use. Defaults to `./${src}/index.js`
     * + moduleName - use this to construct the output file for the web build:`${moduleName}.min.js`. The default is a kebab case identifier  generated from package name and version.
     * + componentName - use this as the rollup output.name for the web build. The default is a pascal case identifier generated from the package name.
     * + devComponentName - the component name to be used in dev output file. Defaults to `MyDevComponent`
     * + devOutputFile -the generated dev output file. Defualt to './.qute/build/dev-bundle.js'
     * + devServerPort - the port used by the dev server. Default is 8090
     * + testOutputFile - the generated test bundle file. Defaults to './.qute/build/test-bundle.js'
     * External and globals are generated by qute plugin.
     *
     * @param {Object} opts
     */
    constructor(opts = {}) {
        this.src = opts.src || 'src';
        this.dist = opts.dist || 'dist';
        this.input = opts.input || path.join(this.src, 'index.js');
        this.moduleName = opts.moduleName || null; // will be generated from package name and version
        this.componentName = opts.componentName || null; // will be generated from package name
        this.devComponentName = opts.devComponentName || 'MyDevComponent';
        this.devOutputFile = opts.devOutputFile || './.qute/build/dev-bundle.js';
        this.testOutputFile = opts.testOutputFile || './.qute/build/test-bundle.js';

        if (isNaN(opts.devServerPort)) {
            this.devServerPort = defaultDevServerPort;
        } else if (!opts.devServerPort) {
            // if port is 0 we disable the dev server
            this.devServerPort = void(0);
        } else {
            this.devServerPort = opts.devServerPort;
        }
    }

    getDefaultOpts() {
        const opts = {};
        if (this.src && this.dist) {
            opts.src = this.src;
            opts.dist = this.dist;
        } else if (this.src) {
            opts.src = this.src;
        } else if (this.dist) {
            opts.dist = this.dist;
        }
        return opts;
    }

    /**
     * Builds the web artifacts
     * If opts.web.minimize is true then compress js and css files.
     * @param {*} opts - qute plugin options
     * @returns rollup configuration
     */
    web(webOpts = {}) {
        const opts = this.getDefaultOpts();
        opts.web = webOpts;
        const minimize = webOpts.minimize;
        return {
            input: webOpts.input || this.input,
            output: {
                name: makeWebComponentName(this.componentName),
                file: path.join('dist', makeWebFileName(this.moduleName, minimize)),
                format: 'iife',
                sourcemap: true,
                plugins: [
                    minimize && terser()
                ]
            },
            plugins: plugins(opts)
        }
    }

    //
    /**
     * Build an `esm` distribution folder (so the package can be used as a dependency by other packages)
     * @param {*} opts - qute plugin options
     * @returns
     */
    lib(libOpts = {}) {
        const opts = Object.assign(this.getDefaultOpts(), libOpts);
        opts.web = false;
        const dist = opts.dist || 'dist';
        return {
            input: libOpts.input || this.input,
            output: {
                dir: dist+'/esm',
                format: 'esm',
                sourcemap: true
            },
            plugins: plugins(opts)
        };
    }

    /**
     * A build which starts a dev server - to be used with npm start
     * @param {*} opts - options to be passed to qute plugin
     * @returns rollup configuration
     */
    dev(webOpts = {}) {
        const opts = this.getDefaultOpts();
        opts.web = webOpts;
        const devServerPort = this.devServerPort;
        const componentName = this.devComponentName;
        // globals and external are automatically configured by the qute plugin.
        // You can specify your own globals if needed.
        // To change the `external` property it is recommended to use an `external` function
        // passed to qute config. Ex: qute({external: (id) => ..., web:true})
        // This function must return null or undefined to let qute use the default value for the given id
        return {
            input: webOpts.input || this.input,
            output: {
                name: componentName,
                file: this.devOutputFile,
                format: 'iife',
                sourcemap: true
            },
            plugins: [
                ...plugins(opts),
                devServerPort && devServer({
                    koa: webOpts.koa || null,
                    port: devServerPort,
                    root: '.qute',
                    open: '/index.html',
                    livereload: {
                        watch: './qute'
                    }
                })
            ]
        };
    }
    /**
     * Builds a single file containing all tests - to be used by npm test
     * Uses @rollup/plugin-multi-entry under the hood.
     * If no testFiles are specified the default pattern is used: `./test/**\/*-test.js?(q)``
     * @returns a rollup configuration
     * @param {*} testFiles - a glob or array to specify the test files. The format is the same of the rollup.input property used by @rollup/plugin-multi-entry
     * @returns
     */
    test(testFiles) {
        return {
            input: testFiles || './test/**/*-test.js?(q)',
            output: {
                file: this.testOutputFile,
                format: 'esm',
                sourcemap: true
            },
            plugins: plugins({test:true})
        }
    }
}
