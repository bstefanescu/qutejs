import '@qutejs/polyfill';
import '@qutejs/spinner';
import window, { document, navigator } from '@qutejs/window';
import Qute from '@qutejs/runtime';
import Router from '@qutejs/router';

<q:template name='toc-item'>
	<li class='toc-item' id={"toc_item:/"+$attrs.href}>
		<a href={$attrs.href} q:html='$attrs.title'></a>
	</li>
</q:template>

<q:template name='toc-section'>
	<li class='toc-section'>
		<a href='#' q:html='$attrs.title'></a>
		<div class='toc-items' q:class='{expanded: $attrs.expand}'>
			<ul>
			<for value='item in $attrs.items'>
				<if value='item.items'>
					<toc-section :title='item.title' :items='item.items' :expand='item.expand' />
				<else/>
					<toc-item :href='item.href' :title='item.title' />
				</if>
			</for>
			</ul>
		</div>
	</li>
</q:template>

<q:template name='toc'>
<ul class='toc'>
	<for value='item in $attrs.items'>
		<if value='item.items'>
			<toc-section :title='item.title' :items='item.items' :expand='item.expand' />
		<else/>
			<toc-item :href='item.href' :title='item.title' />
		</if>
	</for>
</ul>
</q:template>

<q:template name='app'>
<div class='app'>
	<div class='topbar clearfix'>
		<div class='pull-left'>
			<a href='#' id='sidebar-toggle' @click='toggleSidebar'><i class='fas fa-bars'></i></a>
		</div>
		<div class='logo' id='logo'>
		    <a href='./index.html'>
		    <!-- img src='/assets/qute-orange-logo.png' height='20px' -->
		    Qute.js
			</a>
	    </div>
		<div class='pull-right' id='topnav'>
			<a href='../playground/index.html' target='_blank'>playground</a>
			/
			<a href='https://github.com/bstefanescu/qutejs' target='_blank'>github</a>
			/
			<a href='../download' target='_blank' rel="nofollow">download</a>
		</div>
	</div>
	<div id='sidebar'>
		<div class='sidebar-nav'>
			<toc :items='toc' @select='openTocItem' q:channel='toc' />
		</div>
	</div>
	<div id='main'>
		<div class='main'>
			<if docPageContent>
				<div q:html='docPageContent' class='markdown-body' />
			<else>
				<spinner/>
			</if>
		</div>
    </div>
</div>

</q:template>



var iOS = !!navigator.platform && /iPad|iPhone|iPod/.test(navigator.platform);

function lockBodyScroll() {
	document.body.style.overflow = 'hidden';
	if (iOS) document.body.style.position = 'fixed';
}

function unlockBodyScroll() {
	document.body.style.overflow = '';
	if (iOS) document.body.style.position = '';
}

function fetchPage(url, cb) {
  	var xhttp = new XMLHttpRequest();
  	xhttp.onreadystatechange = function() {
    	if (this.readyState == 4) {
    		cb(this.responseText, this.status);
    	}
  	};
  	xhttp.open("GET", url, true);
  	xhttp.send();
}

Qute.converters.markdown = marked;

var TOC = [
	{ title: 'Overview', expand: true, items: [
		{ title: 'Introduction', href: 'introduction'},
		{ title: 'Getting Started', href: 'getting-started'},
		{ title: 'Templates', href: 'templates'},
		{ title: 'Components', href: 'components'},
	]},
	{ title: 'Application Model', expand: true, items: [
		{ title: 'Application Instance', href: 'app/instance'},
		{ title: 'Message Bus', href: 'app/bus'},
		{ title: 'Data Model', href: 'app/data'},
		{ title: 'Internationalization', href: 'app/i18n'},
		{ title: 'Example', href: 'app/example'},
	]},
	{ title: 'Component Model', expand: true, items: [
		{ title: 'Properties', href: 'model/properties'},
		{ title: 'Watchers', href: 'model/watchers'},
		{ title: 'Events', href: 'model/events'},
		{ title: 'Life Cycle', href: 'model/lifecycle'},
		{ title: 'Class Syntax', href: 'model/class'},
	]},
	{ title: 'Directives', expand: true, items: [
		{ title: 'if', href: 'directives/if' },
		{ title: 'for', href: 'directives/for' },
		{ title: 'slot', href: 'directives/slot' },
		{ title: 'nested', href: 'directives/nested' },
		{ title: 'tag', href: 'directives/tag' },
		{ title: 'view', href: 'directives/view' },

		{ title: 'q:class', href: 'attributes/q-class' },
		{ title: 'q:style', href: 'attributes/q-style' },
		{ title: 'q:show', href: 'attributes/q-show' },
		{ title: 'q:for', href: 'attributes/q-for' },
		{ title: 'q:html', href: 'attributes/q-html' },
		{ title: 'q:markdown', href: 'attributes/q-markdown' },
		{ title: 'q:attrs', href: 'attributes/q-attrs' },
		{ title: 'q:emit', href: 'attributes/q-emit' },
		{ title: 'q:async-emit', href: 'attributes/q-async-emit' },
		{ title: 'q:channel', href: 'attributes/q-channel' },
		{ title: 'q:call', href: 'attributes/q-call' },
		{ title: 'q:ref', href: 'attributes/q-ref' },
		{ title: 'q:toggle', href: 'attributes/q-toggle' },
		{ title: 'q:bind', href: 'attributes/q-bind' },
		{ title: 'q:on', href: 'attributes/q-on' },
		{ title: 'Custom Attributes', href: 'attributes/q' }
	]},
	{ title: 'Plugins', expand: true, items: [
		{ title: 'Routing', href: 'plugins/routing' },
		{ title: 'Form', href: 'plugins/form' },
		{ title: 'Actions Group', href: 'plugins/group' },
		{ title: 'Internationalization', href: 'plugins/i18n' },
	]},
	{ title: 'Basic Components', expand: true, items: [
		{ title: 'modal', href: 'components/modal' },
		{ title: 'popup', href: 'components/popup' },
		{ title: 'spinner', href: 'components/spinner' },
	]},
	{ title: 'Advanced', expand: true, items: [
		{ title: 'Qute API', href: 'advanced/api'},
		{ title: 'JSQ File Format', href: 'advanced/jsq'},
	]},
	{ title: 'Examples', expand: true, items: [
		{ title: 'Hello World', href: 'examples/hello'},
		{ title: 'Timer', href: 'examples/timer'},
		{ title: 'Custom Form Control', href: 'examples/counter'},
		{ title: 'Todo List', href: 'examples/todo'},
		{ title: 'Tab Bar', href: 'examples/tabs'},
		{ title: 'Using Existing Libraries', href: 'examples/using-existing-libs'},
		{ title: 'Popup Demo', href: 'examples/popup-demo'},
		{ title: 'Modal Demo', href: 'examples/modal-demo'},
	]}
]

function toggleSection(target) {
	var items = target.querySelector('.toc-items');
	items.classList.toggle('expanded');
}
function expandSection(target) {
	var items = target.querySelector('.toc-items');
	items.classList.add('expanded');
}

function highlightItem(root, target) {
	//console.log('HIGHLIGHT', target);
	var active = root.querySelector('li.toc-item.active');
	active && active.classList.remove('active');
	target.classList.add('active');
}
var Toc = new Qute('toc').on('click', 'a', function(e) {
		var parentNode = e.target.parentNode;
		if (parentNode.matches('li.toc-section')) {
			var href = e.target.getAttribute('href');
			if (href && href !== '#') {
				this.emit('select', href);
			} else {
				toggleSection(parentNode);
			}
		} else {
			highlightItem(this.$el, parentNode);
			this.emit('select', e.target.getAttribute('href'));
		}
		return false;
}).channel(function(msg, data) {
	if (msg === 'select') {
		var item = document.getElementById('toc_item:'+data);
		if (item) {
			var cl = item.classList;
			if (!cl.contains('active')) {
				var section = item.closest('.toc-section');
				section && expandSection(section);
				highlightItem(this.$el, item);
				if (!isInViewport(item)) {
					item.scrollIntoView();
				}
			}
		}
	}
});

var App = new Qute('app', {
	get docPageContent() {
		return this.docPage ? this.docPages[this.docPage] : '';
	},
	init: function(app) {
		var self = this;
		this.docPages = {};
		this.toc = TOC;
		this.router = new Router(app, {
			'*': function(path) {
				self.updateDocPage(path);
			},
			'/': 'introduction'
		}).start();

		this.router.onChange(function(path) {
			self.postAsync('toc', 'select', path);
		});
//TODO
		this.subscribe('app#page', function(page) {
			this.router.navigate(page);
			//this.updateDocPage(page); // no need to use self
		});
		//this.updateDocPage('overview')
	},
	connected: function() {
		function runSnippet(btn) {
			var code = btn.closest('pre').querySelector('code.language-jsq').textContent;
			localStorage.setItem('qute.playground.snippet', code);
			window.open("../playground/index.html", 'qute.playground');
		}
		this.$on('click', 'button.run-snippet', function(e) {
			runSnippet(e.target);
			return false;
		});
		this.$on('click', 'button.run-snippet > i', function(e) {
			runSnippet(e.target.parentNode);
			return false;
		});
	},
	updateDocPage: function(page) {
		var pageKey = 'docs/'+page+'.md';
		if (this.docPage === pageKey) return;
		var self = this;
		this.docPage = pageKey;
		this.update(); // force an update - the spinner will be shown if no content is available
		Qute.UpdateQueue.runAfter(function() {
			createRunSnippets();
			// scroll to top
			window.scrollTo(0,0);
		});
		if (!(pageKey in this.docPages)) {
			//console.log('FETCH',pageKey)
			fetchPage(pageKey, function(data, status) {
				self.docPages[pageKey] = marked(data);
				self.update(); // force an update
				Qute.UpdateQueue.runAfter(function() {
					createRunSnippets();
				});
			});
		}
	},
	openTocItem: function(e) {
		if (window.SIDEBAR_ON) hideSidebar();
		this.router.navigate(e.detail);
	},
	toggleSidebar() {
		var sidebar = document.getElementById('sidebar');
		if (!sidebar.clientWidth) {
			showSidebar();
		} else {
			hideSidebar();
		}
	}
});


function parseJsq(text, textHandler, tagHandler) {
	var START_TAG = /\s*<\s*(?:(q\:template)|(q\:style))(?:\s[^>]*)?>/;
	var END_XTAG = /\s*<\/\s*q\:template\s*>/;
	var END_STYLE = /\s*<\/\s*q\:style\s*>/;

	while (text) {
		var m = START_TAG.exec(text);
		if (!m) break;
		var i = m.index, l = m[0].length;
		textHandler(text.substring(0, i));
		var tag, stag = m[0];
		text = text.substring(i+l);
		if (m[1]) { // q:template
			m = END_XTAG.exec(text);
			tag = 'q:template';
		} else if (m[2]) { // style
			m = END_STYLE.exec(text);
			tag = 'q:style';
		} else { // cannot happen
			throw new Error('cannot happen');
		}
		if (m) {
			var i = m.index, l = m[0].length;
			tagHandler(tag, stag, text.substring(0, i), text.substring(i, i+l));
			text = text.substring(i+l);
		} else { // unclosed tag?
			console.log('unclosed tag', tag);
			tagHandler(tag, stag, text, '');
			text = null;
		}
	}
	if (text) {
		textHandler(text);
	}
}

function highlighJsq(code) {
	var out = '';
	parseJsq(code, function(text) {
		if (text.trim()) {
			out += Prism.highlight(text, Prism.languages.javascript, 'javascript');
		} else {
			out += text;
		}
	}, function(tag, start, text, end) {
		if (tag === 'q:template') {
			out += Prism.highlight(start+text+end, Prism.languages.markup, 'xml');
		} else if (tag === 'q:style') {
			out += Prism.highlight(start+text+end, Prism.languages.markup, 'xml');
		}
	});
	return out;
}

function createRunSnippets() {
	var codeEls = document.querySelectorAll('pre > code');
	for (var i=0,l=codeEls.length; i<l; i++) {
		var codeEl = codeEls[i];
		if (codeEl.className === 'language-jsq') {
			createRunSnippetButton(codeEl);
			codeEl.innerHTML = highlighJsq(codeEl.textContent);
		} else if (codeEl.className === 'language-jsq-norun') {
			codeEl.innerHTML = highlighJsq(codeEl.textContent);
		} else {
			Prism.highlightElement(codeEl);
		}

	}
}
function createRunSnippetButton(codeEl) {
	var snippet = codeEl.textContent;
	var pre = codeEl.parentNode;
	pre.style.position = 'relative';
	var btn = document.createElement('button');
	btn.className = 'btn btn-success run-snippet';
	var btnStyle = btn.style;
	btnStyle.position = 'absolute';
	btnStyle.top = '10px';
	btnStyle.right = '20px';
	btn.innerHTML = "<i class='far fa-play-circle'></i> Run";
	btn.setAttribute('title', 'Run snippet in Qute Playground');
	pre.appendChild(btn);
}


// sidebar toggle

function showSidebar(container) {
	(container || document.body).classList.add('show-sidebar');
	var sidebar = document.getElementById('sidebar');
	var main = document.getElementById('main');
	sidebar.style.width = '250px';
	//main.style.marginLeft = '250px';
	window.SIDEBAR_ON = true;
	lockBodyScroll();
}

function hideSidebar(container) {
	(container || document.body).classList.remove('show-sidebar');
	var sidebar = document.getElementById('sidebar');
	var main = document.getElementById('main');
	sidebar.style.width = '0px';
	main.style.marginLeft = '0px';
	window.SIDEBAR_ON = false;
	unlockBodyScroll();
}



/*!
 * Determine if an element is in the viewport
 * (c) 2017 Chris Ferdinandi, MIT License, https://gomakethings.com
 * @param  {Node}    elem The element
 * @return {Boolean}      Returns true if element is in the viewport
 */
function isInViewport(elem) {
	var distance = elem.getBoundingClientRect();
	return (
		distance.top >= 0 &&
		distance.left >= 0 &&
		distance.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&
		distance.right <= (window.innerWidth || document.documentElement.clientWidth)
	);
};


new App().mount();

export default App;
